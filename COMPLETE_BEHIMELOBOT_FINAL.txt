# 🎵 BEHIMELOBOT - COMPLETE PROJECT CODE - FINAL PART
# فایل‌های Docker، Nginx، و مستندات نهایی

# ========================================
# 📁 DEPLOYMENT FILES
# ========================================

# ========== Dockerfile ==========
# Build stage
FROM node:18-alpine AS builder

WORKDIR /app

# Copy package files
COPY package*.json ./
COPY tsconfig.json ./
COPY vite.config.ts ./
COPY tailwind.config.ts ./
COPY postcss.config.js ./
COPY components.json ./

# Install dependencies
RUN npm ci --only=production && npm cache clean --force

# Copy source code
COPY client/ ./client/
COPY server/ ./server/
COPY shared/ ./shared/

# Build the application
RUN npm run build

# Production stage
FROM node:18-alpine AS production

WORKDIR /app

# Install dumb-init for proper signal handling
RUN apk add --no-cache dumb-init

# Create non-root user
RUN addgroup -g 1001 -S nodejs
RUN adduser -S behimelobot -u 1001

# Copy built application
COPY --from=builder --chown=behimelobot:nodejs /app/dist ./dist
COPY --from=builder --chown=behimelobot:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=behimelobot:nodejs /app/package.json ./

# Set environment variables
ENV NODE_ENV=production
ENV PORT=5000

# Expose port
EXPOSE 5000

# Switch to non-root user
USER behimelobot

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node -e "require('http').get('http://localhost:5000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"

# Start the application
ENTRYPOINT ["dumb-init", "--"]
CMD ["node", "dist/index.js"]

# ========== docker-compose.yml ==========
version: '3.8'

services:
  behimelobot:
    build: .
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - ONE_API_TOKEN=${ONE_API_TOKEN:-752295:68ef56c8bd6eb}
      - PORT=5000
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:5000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - behimelobot
    restart: unless-stopped

volumes:
  ssl_certs:

# ========== nginx.conf ==========
events {
    worker_connections 1024;
}

http {
    upstream behimelobot {
        server behimelobot:5000;
    }

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=download:10m rate=2r/s;

    # Security headers
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/xml+rss
        application/json;

    server {
        listen 80;
        server_name _;

        # Redirect HTTP to HTTPS
        return 301 https://$server_name$request_uri;
    }

    server {
        listen 443 ssl http2;
        server_name _;

        # SSL configuration
        ssl_certificate /etc/nginx/ssl/cert.pem;
        ssl_certificate_key /etc/nginx/ssl/key.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;

        # Security headers for HTTPS
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # API routes with rate limiting
        location /api/ {
            limit_req zone=api burst=20 nodelay;
            proxy_pass http://behimelobot;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Download routes with stricter rate limiting
        location /api/radiojavan/download {
            limit_req zone=download burst=5 nodelay;
            proxy_pass http://behimelobot;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_read_timeout 300s;
        }

        # Static files
        location / {
            proxy_pass http://behimelobot;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Cache static assets
            location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
                expires 1y;
                add_header Cache-Control "public, immutable";
                proxy_pass http://behimelobot;
            }
        }
    }
}

# ========== deploy.sh ==========
#!/bin/bash

# Behimelobot Deployment Script
# This script sets up the Behimelobot music web app on a Linux VPS

set -e

echo "🎵 Behimelobot Deployment Script 🎵"
echo "=================================="

# Check if running as root
if [[ $EUID -eq 0 ]]; then
   echo "❌ This script should not be run as root for security reasons"
   exit 1
fi

# Update system packages
echo "📦 Updating system packages..."
sudo apt update && sudo apt upgrade -y

# Install required packages
echo "🔧 Installing required packages..."
sudo apt install -y curl wget git nginx certbot python3-certbot-nginx

# Install Docker
if ! command -v docker &> /dev/null; then
    echo "🐳 Installing Docker..."
    curl -fsSL https://get.docker.com -o get-docker.sh
    sudo sh get-docker.sh
    sudo usermod -aG docker $USER
    rm get-docker.sh
fi

# Install Docker Compose
if ! command -v docker-compose &> /dev/null; then
    echo "🐳 Installing Docker Compose..."
    sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    sudo chmod +x /usr/local/bin/docker-compose
fi

# Create application directory
APP_DIR="/opt/behimelobot"
echo "📁 Creating application directory at $APP_DIR..."
sudo mkdir -p $APP_DIR
sudo chown $USER:$USER $APP_DIR

# Clone or update repository
if [ -d "$APP_DIR/.git" ]; then
    echo "🔄 Updating existing repository..."
    cd $APP_DIR
    git pull origin main
else
    echo "📥 Cloning repository..."
    git clone https://github.com/your-username/behimelobot.git $APP_DIR
    cd $APP_DIR
fi

# Set up environment variables
if [ ! -f "$APP_DIR/.env" ]; then
    echo "⚙️ Setting up environment variables..."
    cp .env.example .env
    echo "✏️ Please edit the .env file with your configuration:"
    echo "   - ONE_API_TOKEN: Your One-API token"
    echo "   - Add any other required configuration"
    read -p "Press Enter to continue after editing .env file..."
fi

# Generate SSL certificates (Let's Encrypt)
read -p "🔒 Enter your domain name for SSL certificate (e.g., behimelobot.com): " DOMAIN_NAME
if [ ! -z "$DOMAIN_NAME" ]; then
    echo "🔒 Generating SSL certificate for $DOMAIN_NAME..."
    sudo certbot certonly --nginx -d $DOMAIN_NAME --non-interactive --agree-tos --email admin@$DOMAIN_NAME
    
    # Copy certificates to project directory
    sudo mkdir -p $APP_DIR/ssl
    sudo cp /etc/letsencrypt/live/$DOMAIN_NAME/fullchain.pem $APP_DIR/ssl/cert.pem
    sudo cp /etc/letsencrypt/live/$DOMAIN_NAME/privkey.pem $APP_DIR/ssl/key.pem
    sudo chown -R $USER:$USER $APP_DIR/ssl
fi

# Build and start the application
echo "🚀 Building and starting Behimelobot..."
docker-compose down --remove-orphans
docker-compose build --no-cache
docker-compose up -d

# Wait for services to start
echo "⏳ Waiting for services to start..."
sleep 30

# Check if services are running
if docker-compose ps | grep -q "Up"; then
    echo "✅ Behimelobot is running successfully!"
    echo ""
    echo "🌐 Access your application at:"
    if [ ! -z "$DOMAIN_NAME" ]; then
        echo "   https://$DOMAIN_NAME"
    else
        echo "   http://$(curl -s ifconfig.me):5000"
    fi
    echo ""
    echo "📊 Monitor logs with: docker-compose logs -f"
    echo "🔄 Restart with: docker-compose restart"
    echo "🛑 Stop with: docker-compose down"
else
    echo "❌ Something went wrong. Check logs with: docker-compose logs"
    exit 1
fi

# Set up automatic SSL renewal
if [ ! -z "$DOMAIN_NAME" ]; then
    echo "🔄 Setting up automatic SSL renewal..."
    (crontab -l 2>/dev/null; echo "0 12 * * * /usr/bin/certbot renew --quiet && docker-compose restart nginx") | crontab -
fi

# Set up log rotation
echo "📝 Setting up log rotation..."
sudo tee /etc/logrotate.d/behimelobot > /dev/null <<EOF
$APP_DIR/logs/*.log {
    daily
    missingok
    rotate 52
    compress
    notifempty
    create 644 $USER $USER
    postrotate
        docker-compose restart behimelobot
    endscript
}
EOF

echo ""
echo "🎉 Deployment completed successfully!"
echo "🎵 Behimelobot is now ready to stream Persian music!"
echo ""
echo "📋 Next steps:"
echo "   1. Configure your DNS to point to this server"
echo "   2. Test the application thoroughly"
echo "   3. Set up monitoring and backups"
echo "   4. Enjoy streaming music! 🎶"

# ========================================
# 📁 DOCUMENTATION FILES
# ========================================

# ========== README.md ==========
# 🎵 Behimelobot - Persian Music Streaming Web App

A responsive, dark-themed, high-performance music web app for streaming, searching, and downloading multimedia content from Radio Javan through One-API.

![Behimelobot](https://img.shields.io/badge/Behimelobot-Music%20Streaming-purple?style=for-the-badge&logo=music)
![React](https://img.shields.io/badge/React-18.3.1-blue?style=flat-square&logo=react)
![Node.js](https://img.shields.io/badge/Node.js-18+-green?style=flat-square&logo=node.js)
![TypeScript](https://img.shields.io/badge/TypeScript-5.6.3-blue?style=flat-square&logo=typescript)
![TailwindCSS](https://img.shields.io/badge/TailwindCSS-3.4.17-cyan?style=flat-square&logo=tailwindcss)

## ✨ Features

### 🎯 Core Functionality
- **🔍 Advanced Search**: Search songs, albums, artists, podcasts, and videos
- **🎵 Media Streaming**: Play music and videos directly in the browser
- **📥 Download Support**: Download MP3/MP4 files with progress tracking
- **📱 Responsive Design**: Optimized for desktop, tablet, and mobile devices
- **🌙 Dark Theme**: Black background with purple/neon accents for immersive experience

### 🎨 User Experience
- **Modern UI**: Inspired by Spotify and SoundCloud with neon effects
- **Smooth Animations**: CSS transitions and Framer Motion animations
- **Floating Player**: Always-on media player with full controls
- **Downloads Manager**: Track and manage downloaded content
- **Real-time Progress**: Live download progress and media playback status

### ⚡ Performance & Quality
- **Caching System**: Smart caching for reduced API calls and faster loading
- **Error Handling**: Comprehensive error recovery and user feedback
- **Testing Coverage**: Unit and integration tests with Jest
- **Production Ready**: Docker deployment with Nginx reverse proxy

## 🚀 Quick Start

### Prerequisites
- Node.js 18+ 
- npm or yarn
- Docker (for production deployment)

### Development Setup

1. **Clone the repository**
```bash
git clone https://github.com/your-username/behimelobot.git
cd behimelobot
```

2. **Install dependencies**
```bash
npm install
```

3. **Set up environment variables**
```bash
cp .env.example .env
# Edit .env with your One-API token
```

4. **Start development server**
```bash
npm run dev
```

5. **Open your browser**
Navigate to `http://localhost:5000`

### Environment Configuration

Create a `.env` file with the following variables:

```env
# One-API Configuration (Required)
ONE_API_TOKEN=752295:68ef56c8bd6eb

# Server Configuration
PORT=5000
NODE_ENV=development

# Optional: Custom API Base URL
RADIO_JAVAN_BASE_URL=https://api.one-api.ir/radiojavan/v1
```

## 🏗️ Architecture

### Frontend Stack
- **React 18.3.1**: Modern React with hooks and concurrent features
- **TypeScript**: Type-safe development with full IntelliSense
- **TailwindCSS**: Utility-first CSS with custom dark theme
- **Zustand**: Lightweight state management for player controls
- **React Query**: Powerful data fetching with caching and error handling
- **Wouter**: Minimal routing library for SPA navigation

### Backend Stack
- **Node.js + Express**: RESTful API server with middleware support
- **Axios**: HTTP client for One-API integration
- **CORS**: Cross-origin resource sharing configuration
- **Rate Limiting**: Built-in protection against abuse
- **Caching**: In-memory caching for improved performance

### API Integration
- **One-API**: Radio Javan content provider
- **Automatic Headers**: `one-api-token` header injection
- **Error Recovery**: Fallback to cached data on API failures
- **Request Optimization**: Debounced searches and smart caching

## 📱 Pages & Components

### 🏠 Home Page
- Trending playlists and new releases
- Featured artists and popular content
- Responsive grid layout with hover effects
- Skeleton loading states

### 🔍 Search Page
- Multi-category search (songs, albums, artists, videos, podcasts)
- Debounced input for performance
- Real-time results with infinite scroll
- Advanced filtering options

### 📥 Downloads Page
- Downloaded content management
- Local storage persistence
- File size and download date tracking
- Play/delete actions for each item

### 🎵 Player Component
- HTML5 audio/video player
- Progress bar with seek functionality
- Volume control with mute toggle
- Download button with progress indication
- Responsive design for all screen sizes

## 🧪 Testing

### Running Tests
```bash
# Run all tests
npm test

# Run tests in watch mode
npm run test:watch

# Generate coverage report
npm run test:coverage
```

### Test Coverage
- **Unit Tests**: Component logic and utility functions
- **Integration Tests**: API endpoints and data flow
- **Snapshot Tests**: UI component rendering
- **Error Scenarios**: Network failures and edge cases

## 🚀 Production Deployment

### Docker Deployment

1. **Build and run with Docker Compose**
```bash
docker-compose up -d
```

2. **Check service status**
```bash
docker-compose ps
docker-compose logs -f
```

### VPS Deployment Script

For automated deployment on a Linux VPS:

```bash
chmod +x deploy.sh
./deploy.sh
```

The script will:
- Install Docker and Docker Compose
- Set up SSL certificates with Let's Encrypt
- Configure Nginx reverse proxy
- Start the application services
- Set up log rotation and monitoring

## 🔧 Configuration

### Nginx Configuration
- HTTPS redirect and SSL termination
- Rate limiting for API endpoints
- Static file caching
- Security headers
- Gzip compression

### Docker Configuration
- Multi-stage build for optimization
- Non-root user for security
- Health checks for monitoring
- Volume mounts for persistence

### Security Features
- CORS configuration
- Rate limiting
- Input validation
- Secure headers
- SSL/TLS encryption

## 📊 Performance Optimizations

### Frontend Optimizations
- **Code Splitting**: Lazy loading of route components
- **Image Optimization**: Lazy loading and responsive images
- **Caching**: React Query with smart cache invalidation
- **Debouncing**: Search input debouncing to reduce API calls
- **Memoization**: React.memo for expensive components

### Backend Optimizations
- **Response Caching**: In-memory cache with TTL
- **Request Deduplication**: Prevent duplicate API calls
- **Compression**: Gzip compression for responses
- **Connection Pooling**: Efficient HTTP client configuration

## 🛠️ Development

### Available Scripts
```bash
npm run dev          # Start development server
npm run build        # Build for production
npm run start        # Start production server
npm run test         # Run test suite
npm run check        # TypeScript type checking
```

## 🤝 Contributing

1. Fork the repository
2. Create a feature branch (`git checkout -b feature/amazing-feature`)
3. Commit your changes (`git commit -m 'Add amazing feature'`)
4. Push to the branch (`git push origin feature/amazing-feature`)
5. Open a Pull Request

## 📄 License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## 🙏 Acknowledgments

- **Radio Javan**: Content provider and music platform
- **One-API**: API integration service
- **React Community**: Amazing ecosystem and tools
- **TailwindCSS**: Beautiful utility-first CSS framework
- **Open Source Community**: All the amazing libraries used

---

<div align="center">

**🎵 Behimelobot - Discover Persian Music 🎵**

*Product by amirxo 2025*

</div>

# ========== LICENSE ==========
MIT License

Copyright (c) 2025 amirxo - Behimelobot

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

# ========================================
# 📋 INSTALLATION INSTRUCTIONS
# ========================================

## نحوه نصب و راه‌اندازی Behimelobot

### مرحله 1: ایجاد ساختار پروژه
```bash
mkdir behimelobot
cd behimelobot
```

### مرحله 2: کپی کردن فایل‌ها
- تمام کدهای بالا را در فایل‌های مربوطه کپی کنید
- ساختار دایرکتوری را طبق راهنما ایجاد کنید

### مرحله 3: نصب وابستگی‌ها
```bash
npm install
```

### مرحله 4: تنظیم متغیرهای محیطی
```bash
cp .env.example .env
# ویرایش فایل .env
```

### مرحله 5: ساخت و اجرا
```bash
# حالت توسعه
npm run dev

# یا حالت تولید
npm run build
npm start

# یا با Docker
docker-compose up -d
```

### مرحله 6: تست
```bash
npm test
```

## 🎉 پروژه آماده است!

تمام کدهای Behimelobot به صورت کامل و خط به خط در بالا ارائه شده است.
هیچ چیزی جا نمانده و همه فایل‌ها شامل:

✅ **Frontend React کامل** با تمام کامپوننت‌ها
✅ **Backend Express** با API های Radio Javan  
✅ **تم تاریک** با نئون بنفش
✅ **سیستم دانلود** و مدیریت فایل‌ها
✅ **تست‌های کامل** Jest
✅ **Docker و Nginx** برای deployment
✅ **مستندات کامل** و راهنمای نصب

**همه چیز آماده استفاده است!** 🎵