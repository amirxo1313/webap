# 🎵 BEHIMELOBOT - COMPLETE PROJECT CODE - PART 2
# ادامه فایل‌های کامپوننت‌ها و صفحات

# ========== client/src/components/Player.tsx ==========
import { usePlayerStore } from "@/lib/playerStore";
import { Play, Pause, SkipBack, SkipForward, Volume2, VolumeX, Download, Music } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Slider } from "@/components/ui/slider";
import { useEffect, useRef, useState } from "react";

export function Player() {
  const { currentMedia, isPlaying, togglePlay, volume, setVolume } = usePlayerStore();
  const audioRef = useRef<HTMLAudioElement>(null);
  const videoRef = useRef<HTMLVideoElement>(null);
  const [progress, setProgress] = useState(0);
  const [currentTime, setCurrentTime] = useState(0);
  const [duration, setDuration] = useState(0);
  const [isMuted, setIsMuted] = useState(false);

  const mediaRef = currentMedia?.type === 'video' ? videoRef : audioRef;

  useEffect(() => {
    if (!mediaRef.current || !currentMedia) return;

    const media = mediaRef.current;
    const playUrl = currentMedia.hq_link || currentMedia.link || currentMedia.hls_link;

    if (playUrl) {
      media.src = playUrl;
      media.load();
      if (isPlaying) {
        media.play().catch(console.error);
      }
    }
  }, [currentMedia, mediaRef]);

  useEffect(() => {
    if (!mediaRef.current) return;

    const media = mediaRef.current;
    if (isPlaying) {
      media.play().catch(console.error);
    } else {
      media.pause();
    }
  }, [isPlaying, mediaRef]);

  useEffect(() => {
    if (!mediaRef.current) return;
    mediaRef.current.volume = volume;
  }, [volume, mediaRef]);

  const handleTimeUpdate = () => {
    if (!mediaRef.current) return;
    const media = mediaRef.current;
    setCurrentTime(media.currentTime);
    setDuration(media.duration);
    setProgress((media.currentTime / media.duration) * 100);
  };

  const handleProgressChange = (value: number[]) => {
    if (!mediaRef.current) return;
    const media = mediaRef.current;
    const newTime = (value[0] / 100) * media.duration;
    media.currentTime = newTime;
    setProgress(value[0]);
  };

  const handleVolumeChange = (value: number[]) => {
    setVolume(value[0]);
    setIsMuted(value[0] === 0);
  };

  const toggleMute = () => {
    if (isMuted) {
      setVolume(0.5);
      setIsMuted(false);
    } else {
      setVolume(0);
      setIsMuted(true);
    }
  };

  const formatTime = (seconds: number) => {
    if (!seconds || isNaN(seconds)) return "0:00";
    const mins = Math.floor(seconds / 60);
    const secs = Math.floor(seconds % 60);
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  const handleDownload = async () => {
    if (!currentMedia) return;
    const downloadUrl = currentMedia.hq_link || currentMedia.link;
    if (!downloadUrl) return;

    try {
      const response = await fetch(`/api/radiojavan/download?url=${encodeURIComponent(downloadUrl)}`);
      const blob = await response.blob();
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      const filename = `${currentMedia.artist || 'Unknown'} - ${currentMedia.title}.${currentMedia.type === 'video' ? 'mp4' : 'mp3'}`;
      a.href = url;
      a.download = filename;
      document.body.appendChild(a);
      a.click();
      window.URL.revokeObjectURL(url);
      document.body.removeChild(a);

      // Save download to localStorage
      const downloadItem = {
        id: currentMedia.id,
        title: currentMedia.title,
        artist: currentMedia.artist,
        type: currentMedia.type,
        downloadedAt: new Date().toISOString(),
        fileSize: `${(blob.size / 1024 / 1024).toFixed(2)} MB`,
        originalMedia: currentMedia
      };

      const existingDownloads = JSON.parse(localStorage.getItem('behimelobot_downloads') || '[]');
      const updatedDownloads = [downloadItem, ...existingDownloads.filter((item: any) => item.id !== currentMedia.id)];
      localStorage.setItem('behimelobot_downloads', JSON.stringify(updatedDownloads));

    } catch (error) {
      console.error('Download failed:', error);
    }
  };

  if (!currentMedia) {
    return null;
  }

  return (
    <>
      <audio
        ref={audioRef}
        onTimeUpdate={handleTimeUpdate}
        onEnded={() => togglePlay()}
        className="hidden"
      />
      <video
        ref={videoRef}
        onTimeUpdate={handleTimeUpdate}
        onEnded={() => togglePlay()}
        className="hidden"
      />

      <div className="fixed bottom-14 left-0 right-0 z-50 bg-card/95 backdrop-blur-xl border-t border-card-border neon-glow-sm">
        <div className="absolute top-0 left-0 right-0 -translate-y-full">
          <Slider
            value={[progress]}
            onValueChange={handleProgressChange}
            max={100}
            step={0.1}
            className="w-full cursor-pointer"
            data-testid="slider-progress"
          />
        </div>

        <div className="max-w-7xl mx-auto px-4 py-3">
          <div className="flex items-center justify-between gap-4">
            <div className="flex items-center gap-4 flex-1 min-w-0">
              <div className="w-14 h-14 flex-shrink-0 rounded-md overflow-hidden bg-muted">
                {currentMedia.photo ? (
                  <img
                    src={currentMedia.photo}
                    alt={currentMedia.title}
                    className="w-full h-full object-cover"
                  />
                ) : (
                  <div className="w-full h-full flex items-center justify-center">
                    <Music className="w-6 h-6 text-muted-foreground" />
                  </div>
                )}
              </div>

              <div className="flex-1 min-w-0">
                <div className="font-semibold text-foreground truncate" data-testid="text-player-title">
                  {currentMedia.title}
                </div>
                {currentMedia.artist && (
                  <div className="text-sm text-muted-foreground truncate" data-testid="text-player-artist">
                    {currentMedia.artist}
                  </div>
                )}
              </div>
            </div>

            <div className="flex items-center gap-2">
              <Button
                size="icon"
                variant="ghost"
                className="w-8 h-8"
                disabled
                data-testid="button-previous"
              >
                <SkipBack className="w-4 h-4" />
              </Button>

              <Button
                size="icon"
                className="w-12 h-12 rounded-full neon-glow pulse-glow"
                onClick={togglePlay}
                data-testid="button-play-pause"
              >
                {isPlaying ? (
                  <Pause className="w-5 h-5" />
                ) : (
                  <Play className="w-5 h-5 fill-current ml-0.5" />
                )}
              </Button>

              <Button
                size="icon"
                variant="ghost"
                className="w-8 h-8"
                disabled
                data-testid="button-next"
              >
                <SkipForward className="w-4 h-4" />
              </Button>
            </div>

            <div className="hidden md:flex items-center gap-4 flex-1 justify-end">
              <span className="text-sm text-muted-foreground tabular-nums">
                {formatTime(currentTime)}
              </span>
              <span className="text-sm text-muted-foreground">/</span>
              <span className="text-sm text-muted-foreground tabular-nums">
                {formatTime(duration)}
              </span>

              <div className="flex items-center gap-2">
                <Button
                  size="icon"
                  variant="ghost"
                  className="w-8 h-8"
                  onClick={toggleMute}
                  data-testid="button-mute"
                >
                  {isMuted || volume === 0 ? (
                    <VolumeX className="w-4 h-4" />
                  ) : (
                    <Volume2 className="w-4 h-4" />
                  )}
                </Button>
                <Slider
                  value={[volume]}
                  onValueChange={handleVolumeChange}
                  max={1}
                  step={0.01}
                  className="w-24"
                  data-testid="slider-volume"
                />
              </div>

              <Button
                size="icon"
                variant="ghost"
                className="w-8 h-8 text-chart-3"
                onClick={handleDownload}
                data-testid="button-download-player"
              >
                <Download className="w-4 h-4" />
              </Button>
            </div>
          </div>
        </div>
      </div>
    </>
  );
}

# ========== client/src/components/TrackList.tsx ==========
import { PlaylistItem } from "@shared/schema";
import { Play, Download, Music, Pause } from "lucide-react";
import { Button } from "@/components/ui/button";
import { usePlayerStore } from "@/lib/playerStore";
import { useState } from "react";

interface TrackListProps {
  tracks: PlaylistItem[];
}

export function TrackList({ tracks }: TrackListProps) {
  const { currentMedia, isPlaying, setCurrentMedia, togglePlay } = usePlayerStore();

  const handleDownload = async (track: PlaylistItem) => {
    const downloadUrl = track.hq_link || track.link;
    if (!downloadUrl) return;

    try {
      const response = await fetch(`/api/radiojavan/download?url=${encodeURIComponent(downloadUrl)}`);
      const blob = await response.blob();
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `${track.artist || 'Unknown'} - ${track.title}.mp3`;
      document.body.appendChild(a);
      a.click();
      window.URL.revokeObjectURL(url);
      document.body.removeChild(a);
    } catch (error) {
      console.error('Download failed:', error);
    }
  };

  const formatDuration = (duration?: string) => {
    if (!duration) return '';
    return duration;
  };

  return (
    <div className="space-y-1">
      {tracks.map((track, index) => {
        const isCurrentTrack = currentMedia?.id === track.id;
        const isTrackPlaying = isCurrentTrack && isPlaying;

        return (
          <div
            key={track.id}
            className={`group flex items-center gap-4 p-3 rounded-md hover-elevate transition-all ${
              isCurrentTrack ? 'bg-primary/10' : ''
            }`}
            data-testid={`track-${track.id}`}
          >
            <div className="w-8 text-center text-sm text-muted-foreground group-hover:opacity-0 transition-opacity">
              {isTrackPlaying ? (
                <div className="flex justify-center">
                  <div className="w-1 h-3 bg-primary animate-pulse mx-0.5"></div>
                  <div className="w-1 h-3 bg-primary animate-pulse mx-0.5 animation-delay-150"></div>
                  <div className="w-1 h-3 bg-primary animate-pulse mx-0.5 animation-delay-300"></div>
                </div>
              ) : (
                index + 1
              )}
            </div>

            <Button
              size="icon"
              variant="ghost"
              className="w-8 h-8 opacity-0 group-hover:opacity-100 transition-opacity absolute left-3"
              onClick={() => {
                if (isCurrentTrack) {
                  togglePlay();
                } else {
                  setCurrentMedia({
                    id: track.id,
                    title: track.title,
                    artist: track.artist,
                    album: track.album,
                    photo: track.photo || track.thumbnail,
                    link: track.link,
                    hq_link: track.hq_link,
                    hls_link: track.hls_link,
                    type: track.type === 'video' ? 'video' : track.type === 'podcast' ? 'podcast' : 'song',
                    duration: track.duration,
                  });
                }
              }}
              data-testid={`button-play-track-${track.id}`}
            >
              {isTrackPlaying ? (
                <Pause className="w-4 h-4" />
              ) : (
                <Play className="w-4 h-4 fill-current" />
              )}
            </Button>

            {(track.photo || track.thumbnail) && (
              <div className="w-10 h-10 flex-shrink-0">
                <img
                  src={track.photo || track.thumbnail}
                  alt={track.title}
                  className="w-full h-full object-cover rounded"
                />
              </div>
            )}

            <div className="flex-1 min-w-0">
              <div
                className={`font-medium truncate ${isCurrentTrack ? 'text-primary' : 'text-foreground'}`}
                data-testid={`text-track-title-${track.id}`}
              >
                {track.title}
              </div>
              {track.artist && (
                <div className="text-sm text-muted-foreground truncate">
                  {track.artist}
                </div>
              )}
            </div>

            {track.album && (
              <div className="hidden md:block flex-1 min-w-0 text-sm text-muted-foreground truncate">
                {track.album}
              </div>
            )}

            {track.duration && (
              <div className="text-sm text-muted-foreground tabular-nums">
                {formatDuration(track.duration)}
              </div>
            )}

            <Button
              size="icon"
              variant="ghost"
              className="w-8 h-8 opacity-0 group-hover:opacity-100 transition-opacity text-chart-3"
              onClick={() => handleDownload(track)}
              data-testid={`button-download-${track.id}`}
            >
              <Download className="w-4 h-4" />
            </Button>
          </div>
        );
      })}
    </div>
  );
}

# ========================================
# 📁 PAGES FILES
# ========================================

# ========== client/src/pages/Home.tsx ==========
import { useQuery } from "@tanstack/react-query";
import { HomeResponse } from "@shared/schema";
import { Layout } from "@/components/Layout";
import { MediaCard } from "@/components/MediaCard";
import { Music2, TrendingUp, Loader2, RefreshCw, AlertCircle } from "lucide-react";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";

export default function Home() {
  const { data, isLoading, error, refetch } = useQuery<HomeResponse>({
    queryKey: ['/api/radiojavan/home'],
    retry: 3,
    retryDelay: (attemptIndex) => Math.min(1000 * 2 ** attemptIndex, 30000),
  });

  if (isLoading) {
    return (
      <Layout>
        <div className="flex items-center justify-center min-h-[60vh]">
          <div className="text-center">
            <Loader2 className="w-12 h-12 text-primary animate-spin mx-auto mb-4" />
            <p className="text-muted-foreground" data-testid="text-loading">Loading trending music...</p>
          </div>
        </div>
      </Layout>
    );
  }

  if (error) {
    return (
      <Layout>
        <div className="flex items-center justify-center min-h-[60vh]">
          <Card className="p-8 text-center max-w-md gradient-bg">
            <AlertCircle className="w-16 h-16 text-destructive mx-auto mb-4 floating-animation" />
            <h2 className="text-xl font-semibold mb-2 neon-text">Unable to load content</h2>
            <p className="text-muted-foreground mb-4" data-testid="text-error">
              {error instanceof Error ? error.message : "Please check your connection and try again."}
            </p>
            <Button 
              onClick={() => refetch()} 
              className="gap-2 neon-glow-sm"
              variant="outline"
            >
              <RefreshCw className="w-4 h-4" />
              Try Again
            </Button>
          </Card>
        </div>
      </Layout>
    );
  }

  const sections = data?.result?.sections || [];

  return (
    <Layout>
      <div className="relative">
        <div className="absolute inset-0 bg-gradient-to-b from-primary/20 via-background to-background pointer-events-none" style={{ height: '60vh' }} />
        
        <div className="relative max-w-7xl mx-auto px-4 md:px-8 py-12">
          <div className="text-center mb-16 py-20">
            <h1 className="font-display text-5xl md:text-7xl font-bold mb-4 bg-gradient-to-r from-primary via-primary/80 to-primary/60 bg-clip-text text-transparent">
              Discover Persian Music
            </h1>
            <p className="text-xl text-muted-foreground max-w-2xl mx-auto">
              Stream and download the latest songs, albums, and playlists from Radio Javan
            </p>
          </div>

          <div className="space-y-16">
            {sections.map((section) => {
              if (section.type === 'header') {
                return (
                  <div key={section.id} className="flex items-center gap-3">
                    <TrendingUp className="w-6 h-6 text-primary" />
                    <h2 className="text-3xl md:text-4xl font-display font-bold" data-testid={`text-section-${section.id}`}>
                      {section.title}
                    </h2>
                  </div>
                );
              }

              if (section.type === 'slider_square' && section.items && section.items.length > 0) {
                return (
                  <div key={section.id} className="space-y-6">
                    {section.title && (
                      <h2 className="text-2xl md:text-3xl font-display font-bold" data-testid={`text-section-${section.id}`}>
                        {section.title}
                      </h2>
                    )}
                    <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-6">
                      {section.items.map((item) => (
                        <MediaCard key={item.id} item={item} />
                      ))}
                    </div>
                  </div>
                );
              }

              return null;
            })}
          </div>

          {sections.length === 0 && (
            <div className="text-center py-20">
              <Music2 className="w-24 h-24 text-muted-foreground mx-auto mb-6 opacity-50" />
              <p className="text-xl text-muted-foreground">No content available</p>
            </div>
          )}
        </div>
      </div>
    </Layout>
  );
}